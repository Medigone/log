[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-07-23 19:26:15.800243",
  "module": "Log",
  "name": "Bouton contact html",
  "script": "frappe.ui.form.on('Customer', {\n    refresh: function(frm) {\n        // Construction du HTML qui contient le conteneur pour le tableau et le bouton sous le tableau\n        let html_content = `\n            <div id=\"title\" style=\"margin-top: 5px; font-size: 14px;\">Liste Contacts</div>\n            <div id=\"contacts-table\" style=\"margin-top: 10px;\"></div>\n            <button class=\"btn btn-secondary btn-xs\" id=\"add-contact-btn\" style=\"margin-top: 10px; margin-bottom: 10px;\">Ajouter Contact</button>\n        `;\n        frm.get_field('custom_contact_html_custom').$wrapper.html(html_content);\n\n        // Fonction pour charger et afficher la liste des contacts via la méthode Python\n        function load_contacts() {\n            frappe.call({\n                method: \"log.log.customer_hooks.get_customer_contacts\", // Vérifiez le chemin de votre méthode\n                args: { customer: frm.doc.name },\n                callback: function(r) {\n                    if (r.message) {\n                        let data = r.message;\n                        // Construction du tableau HTML avec attribution d'un data-docname pour chaque ligne\n                        let table_html = `<table id=\"contacts-table-inner\">\n                            <thead>\n                                <tr>\n                                    <th>Contact</th>\n                                    <th>Fonction</th>\n                                    <th>Mobile</th>\n                                    <th>Email</th>\n                                </tr>\n                            </thead>\n                            <tbody>`;\n                        data.forEach(function(contact) {\n                            table_html += `<tr class=\"contact-row\" data-docname=\"${contact.docname}\">\n                                <td><strong>${contact.contact}</strong></td>\n                                <td>${contact.designation}</td>\n                                <td>${contact.mobile}</td>\n                                <td>${contact.email}</td>\n                            </tr>`;\n                        });\n                        table_html += `</tbody></table>`;\n                        frm.get_field('custom_contact_html_custom').$wrapper.find('#contacts-table').html(table_html);\n\n                        // Injection du CSS pour le style du tableau\n                        let css = `\n                         <style>\n                        /* Conteneur du tableau */\n                        #contacts-table {\n                            overflow-x: auto;\n                        }\n                        /* Style du tableau */\n                        #contacts-table-inner {\n                            border-collapse: separate;\n                            border-spacing: 0;\n                            width: 100%;\n                            border: 0.4px solid #e9ecef;\n                            border-radius: 8px;\n                            overflow: hidden;\n                            font-size: 12px;\n                        }\n                        #contacts-table-inner th {\n                            background-color: #f2f2f2;\n                            border: 0.4px solid #e9ecef;\n                            padding: 8px;\n                            white-space: nowrap;\n                        }\n                        #contacts-table-inner td {\n                            border: 0.4px solid #e9ecef;\n                            padding: 8px;\n                            white-space: nowrap;\n                        }\n                        #contacts-table-inner thead tr:first-child th:first-child {\n                            border-top-left-radius: 8px;\n                        }\n                        #contacts-table-inner thead tr:first-child th:last-child {\n                            border-top-right-radius: 8px;\n                        }\n                        #contacts-table-inner tbody tr:last-child td:first-child {\n                            border-bottom-left-radius: 8px;\n                        }\n                        #contacts-table-inner tbody tr:last-child td:last-child {\n                            border-bottom-right-radius: 8px;\n                        }\n                        /* Curseur pointer sur la ligne */\n                        #contacts-table-inner tbody tr.contact-row {\n                            cursor: pointer;\n                        }\n                        </style>\n                        `;\n                        // On ajoute le style dans le wrapper (s'il n'est pas déjà présent)\n                        if (frm.get_field('custom_contact_html_custom').$wrapper.find('style').length === 0) {\n                            frm.get_field('custom_contact_html_custom').$wrapper.append(css);\n                        }\n\n                        // Ajout d'un événement click sur chaque ligne du tableau\n                        frm.get_field('custom_contact_html_custom').$wrapper.find('#contacts-table-inner tbody')\n                            .on('click', 'tr.contact-row', function() {\n                                let docname = $(this).attr('data-docname');\n                                // Utilisation de frappe.set_route pour naviguer vers le formulaire Contact\n                                frappe.set_route(\"Form\", \"Contact\", docname);\n                            });\n                    }\n                }\n            });\n        }\n\n        // Chargement initial des contacts\n        load_contacts();\n\n        // Gestion du clic sur le bouton pour ajouter un contact\n        frm.get_field('custom_contact_html_custom').$wrapper.find('#add-contact-btn').click(function() {\n            frappe.prompt([\n                {\n                    \"fieldname\": \"first_name\",\n                    \"fieldtype\": \"Data\",\n                    \"label\": __(\"First Name\"),\n                    \"reqd\": 1\n                },\n                {\n                    \"fieldname\": \"last_name\",\n                    \"fieldtype\": \"Data\",\n                    \"label\": __(\"Last Name\"),\n                    \"reqd\": 1\n                },\n                {\n                    \"fieldname\": \"designation\",\n                    \"fieldtype\": \"Data\",\n                    \"label\": __(\"Fonction\"),\n                    \"reqd\": 1\n                },\n                {\n                    \"fieldname\": \"mobile_no\",\n                    \"fieldtype\": \"Data\",\n                    \"label\": __(\"Téléphone Mobile\"),\n                    \"reqd\": 1\n                },\n                {\n                    \"fieldname\": \"email\",\n                    \"fieldtype\": \"Data\",\n                    \"label\": __(\"Email\"),\n                    \"reqd\": 1\n                },\n                {\n                    \"fieldname\": \"is_primary\",\n                    \"fieldtype\": \"Check\",\n                    \"label\": __(\"Est Contact Principal\"),\n                    \"default\": 0\n                }\n            ],\n            function(values) {\n                frappe.call({\n                    method: \"frappe.client.insert\",\n                    args: {\n                        doc: {\n                            doctype: \"Contact\",\n                            first_name: values.first_name,\n                            last_name: values.last_name,\n                            designation: values.designation,\n                            is_primary_contact: 1,\n                            links: [{\n                                link_doctype: \"Customer\",\n                                link_name: frm.doc.name\n                            }],\n                            phone_nos: [{\n                                phone: values.mobile_no,\n                                is_primary_mobile_no: 1\n                            }],\n                            email_ids: [{\n                                email_id: values.email,\n                                is_primary: 1\n                            }]\n                        }\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            frappe.msgprint(\"Contact ajouté avec succès\");\n                            if (values.is_primary) {\n                                frappe.call({\n                                    method: \"frappe.client.set_value\",\n                                    args: {\n                                        doctype: \"Customer\",\n                                        name: frm.doc.name,\n                                        fieldname: \"customer_primary_contact\",\n                                        value: r.message.name\n                                    },\n                                    callback: function() {\n                                        frappe.msgprint(\"Customer mis à jour avec le contact principal\");\n                                    }\n                                });\n                            }\n                            // Recharge le tableau des contacts après insertion\n                            load_contacts();\n                        }\n                    }\n                });\n            },\n            __(\"Ajouter un Contact\"),\n            __(\"Créer\")\n            );\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2025-07-23 20:56:04.224901",
  "module": "Log",
  "name": "Bon de livraison",
  "script": "frappe.ui.form.on('Delivery Note', {\n    refresh: function(frm) {\n        // 1) Bouton \"Créer Colis\" uniquement en brouillon et si can_create_colis\n        if (frm.doc.docstatus === 0) {\n            frappe.call({\n                method: 'log.delivery_note_hooks.can_create_colis',\n                args: { delivery_note_name: frm.doc.name },\n                callback: r => {\n                    if (r.message) {\n                        frm.add_custom_button('Créer Colis', () => {\n                            const do_create = () => {\n                                frappe.call({\n                                    method: 'log.delivery_note_hooks.create_colis',\n                                    args: { delivery_note_name: frm.doc.name },\n                                    callback: r2 => {\n                                        if (r2.message) {\n                                            // on passe au Colis créé\n                                            frappe.set_route('Form', 'Colis', r2.message);\n                                        }\n                                    }\n                                });\n                            };\n                            // si jamais non sauvegardé, on sauve d'abord\n                            if (frm.doc.__islocal) {\n                                frm.save().then(do_create);\n                            } else {\n                                do_create();\n                            }\n                        });\n                    }\n                }\n            });\n        }\n\n        // 2) Affiche toujours la liste des colis existants\n        load_colis(frm);\n        \n        // 3) Écouter les changements sur les articles du bon de livraison\n        setup_auto_refresh(frm);\n    },\n    \n    // Événement déclenché après sauvegarde\n    after_save: function(frm) {\n        load_colis(frm);\n    },\n    \n    // Événement déclenché lors de la validation\n    validate: function(frm) {\n        // Programmer un rafraîchissement après validation\n        setTimeout(() => load_colis(frm), 500);\n    }\n});\n\n// Fonction pour configurer le rafraîchissement automatique\nfunction setup_auto_refresh(frm) {\n    // Écouter les changements sur la table des articles\n    if (frm.fields_dict.items && frm.fields_dict.items.grid) {\n        const grid = frm.fields_dict.items.grid;\n        \n        // Surcharger les méthodes d'ajout/suppression de lignes\n        const original_add_new_row = grid.add_new_row;\n        const original_remove_row = grid.remove_row;\n        \n        grid.add_new_row = function(...args) {\n            const result = original_add_new_row.apply(this, args);\n            setTimeout(() => load_colis(frm), 300);\n            return result;\n        };\n        \n        grid.remove_row = function(...args) {\n            const result = original_remove_row.apply(this, args);\n            setTimeout(() => load_colis(frm), 300);\n            return result;\n        };\n    }\n    \n    // Écouter les événements de suppression de documents liés (Colis)\n    frappe.realtime.on('doc_update', function(data) {\n        if (data.doctype === 'Colis' && frm.doc.name) {\n            // Vérifier si le colis était lié à ce bon de livraison\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Colis',\n                    filters: { name: data.name },\n                    fieldname: 'bl'\n                },\n                callback: function(r) {\n                    if (r.message && r.message.bl === frm.doc.name) {\n                        load_colis(frm);\n                    }\n                }\n            });\n        }\n    });\n    \n    // Écouter les suppressions de documents\n    frappe.realtime.on('doc_delete', function(data) {\n        if (data.doctype === 'Colis') {\n            // Rafraîchir après suppression d'un colis\n            setTimeout(() => load_colis(frm), 500);\n        }\n    });\n}\n\nfunction load_colis(frm) {\n    const f = frm.get_field('custom_html');\n    if (!f) return;\n    const $w = f.$wrapper;\n\n    // Récupération simultanée des colis et des articles non emballés\n    Promise.all([\n        new Promise(resolve => {\n            frappe.call({\n                method: 'log.delivery_note_hooks.get_colis_for_delivery_note',\n                args: { delivery_note_name: frm.doc.name },\n                callback: r => resolve(r.message || [])\n            });\n        }),\n        new Promise(resolve => {\n            frappe.call({\n                method: 'log.delivery_note_hooks.get_unpacked_items',\n                args: { delivery_note_name: frm.doc.name },\n                callback: r => resolve(r.message || [])\n            });\n        })\n    ]).then(([colisList, unpackedItems]) => {\n        // Construction du HTML avec titre et conteneur pour le tableau des colis\n        let html = `\n            <div id=\"colis-title\" style=\"margin-top: 5px; margin-bottom: 10px; font-size: 14px; font-weight: bold;\">\n                Colis liés (${colisList.length})\n            </div>\n            <div id=\"colis-table-container\">`;\n\n        if (colisList.length) {\n            // Construction du tableau HTML des colis\n            html += `<table id=\"colis-table\">\n                <thead>\n                    <tr>\n                        <th>Nom</th>\n                        <th>Numéro</th>\n                        <th>Date</th>\n                        <th>Statut</th>\n                    </tr>\n                </thead>\n                <tbody>`;\n            \n            colisList.forEach(c => {\n                const badge = get_status_badge(c.status);\n                html += `<tr class=\"colis-row\" data-colis-name=\"${c.name}\" style=\"cursor: pointer;\">\n                    <td><strong>${c.name}</strong></td>\n                    <td>${c.custom_numero_sequence || '-'}</td>\n                    <td>${frappe.datetime.str_to_user(c.date)}</td>\n                    <td>${badge}</td>\n                </tr>`;\n            });\n            \n            html += `</tbody></table>`;\n        } else {\n            html += `<div style=\"padding: 20px; text-align: center; color: #666; font-size: 12px; border: 1px solid #e9ecef; border-radius: 8px; background-color: #f8f9fa;\">\n                Aucun colis créé pour ce bon de livraison.\n            </div>`;\n        }\n        \n        html += `</div>`;\n        \n        // Section des articles non emballés\n        if (unpackedItems.length > 0) {\n            html += `\n                <div id=\"unpacked-title\" style=\"margin-top: 20px; margin-bottom: 10px; font-size: 14px; font-weight: bold; color: #dc3545;\">\n                    Articles non emballés (${unpackedItems.length})\n                </div>\n                <div id=\"unpacked-table-container\">\n                    <table id=\"unpacked-table\">\n                        <thead>\n                            <tr>\n                                <th>Article</th>\n                                <th>Quantité restante</th>\n                                <th>Quantité totale</th>\n                            </tr>\n                        </thead>\n                        <tbody>`;\n            \n            unpackedItems.forEach(item => {\n                html += `<tr>\n                    <td><strong>${item.description}</strong></td>\n                    <td style=\"color: #dc3545; font-weight: bold;\">${item.remaining_qty}</td>\n                    <td>${item.total_qty}</td>\n                </tr>`;\n            });\n            \n            html += `</tbody></table></div>`;\n        }\n        \n        // Injection du CSS pour le style des tableaux\n        const css = `\n            <style>\n            /* Conteneur des tableaux */\n            #colis-table-container, #unpacked-table-container {\n                overflow-x: auto;\n            }\n            \n            /* Style commun des tableaux */\n            #colis-table, #unpacked-table {\n                border-collapse: separate;\n                border-spacing: 0;\n                width: 100%;\n                border: 0.4px solid #e9ecef;\n                border-radius: 8px;\n                overflow: hidden;\n                font-size: 12px;\n                background-color: white;\n                margin-bottom: 10px;\n            }\n            \n            #colis-table th, #unpacked-table th {\n                background-color: #f8f9fa;\n                border: 0.4px solid #e9ecef;\n                padding: 10px 8px;\n                text-align: left;\n                font-weight: 600;\n                color: #495057;\n            }\n            \n            #colis-table td, #unpacked-table td {\n                border: 0.4px solid #e9ecef;\n                padding: 10px 8px;\n                vertical-align: middle;\n            }\n            \n            /* Style spécifique pour le tableau des articles non emballés */\n            #unpacked-table th {\n                background-color: #fff5f5;\n                color: #dc3545;\n            }\n            \n            #unpacked-table {\n                border-color: #f5c6cb;\n            }\n            \n            /* Coins arrondis */\n            #colis-table thead tr:first-child th:first-child,\n            #unpacked-table thead tr:first-child th:first-child {\n                border-top-left-radius: 8px;\n            }\n            #colis-table thead tr:first-child th:last-child,\n            #unpacked-table thead tr:first-child th:last-child {\n                border-top-right-radius: 8px;\n            }\n            #colis-table tbody tr:last-child td:first-child,\n            #unpacked-table tbody tr:last-child td:first-child {\n                border-bottom-left-radius: 8px;\n            }\n            #colis-table tbody tr:last-child td:last-child,\n            #unpacked-table tbody tr:last-child td:last-child {\n                border-bottom-right-radius: 8px;\n            }\n            \n            /* Hover effects */\n            #colis-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Badge styles */\n            .status-badge {\n                padding: 4px 8px;\n                border-radius: 4px;\n                font-size: 11px;\n                font-weight: 600;\n                text-transform: uppercase;\n            }\n            \n            .status-draft {\n                background-color: #fff3cd;\n                color: #856404;\n                border: 1px solid #ffeaa7;\n            }\n            \n            .status-submitted {\n                background-color: #d1ecf1;\n                color: #0c5460;\n                border: 1px solid #bee5eb;\n            }\n            \n            .status-cancelled {\n                background-color: #f8d7da;\n                color: #721c24;\n                border: 1px solid #f5c6cb;\n            }\n            </style>\n        `;\n        \n        // Injecter le HTML et le CSS\n        $w.html(html + css);\n        \n        // Ajouter les événements click sur les lignes des colis\n        $w.find('.colis-row').on('click', function() {\n            const colisName = $(this).data('colis-name');\n            frappe.set_route('Form', 'Colis', colisName);\n        });\n    });\n}\n\n// Fonction pour générer les badges de statut\nfunction get_status_badge(status) {\n    const statusMap = {\n        'Draft': { class: 'status-draft', text: 'Brouillon' },\n        'Submitted': { class: 'status-submitted', text: 'Soumis' },\n        'Cancelled': { class: 'status-cancelled', text: 'Annulé' }\n    };\n    \n    const statusInfo = statusMap[status] || { class: 'status-draft', text: status };\n    return `<span class=\"status-badge ${statusInfo.class}\">${statusInfo.text}</span>`;\n}\n",
  "view": "Form"
 }
]